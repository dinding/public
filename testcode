import socket

HOST = '127.0.0.1'
PORT = 5000


def run_server():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind((HOST, PORT))
        s.listen()
        print(f"‚úÖ Server listening on {HOST}:{PORT}")

        while True:
            try:
                conn, addr = s.accept()
                with conn:
                    print(f"üì• Connected by {addr}")
                    conn.sendall(b"Hello from server!")
                    # Ïó∞Í≤∞ Ïú†ÏßÄ ÌôïÏù∏Ïö© (optionally receive)
                    # data = conn.recv(1024)
                    # if not data:
                    #     break
            except KeyboardInterrupt:
                print("üî¥ Server shutting down (Ctrl+C).")
                break
            except Exception as e:
                print(f"‚ö†Ô∏è Error: {e}")


if __name__ == "__main__":
    run_server()


##################

import socket
import time

HOST = '127.0.0.1'
PORT = 5000
SRC_PORT = 40000
MAX_RETRY = 5

def safe_connect():
    attempt = 0
    while attempt < MAX_RETRY:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

            # macOSÏóêÏÑúÎäî Ïù¥ Ï§ÑÎèÑ ÌïÑÏöîÌï† Ïàò ÏûàÏùå
            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)

            s.bind((HOST, SRC_PORT))
            s.connect((HOST, PORT))
            return s  # Ïó∞Í≤∞ ÏÑ±Í≥µ
        except OSError as e:
            print(f"Attempt {attempt + 1}: {e}")
            attempt += 1
            time.sleep(0.5)  # ÏßßÍ≤å Í∏∞Îã§Î¶∞ ÌõÑ Ïû¨ÏãúÎèÑ
    raise RuntimeError("Failed to connect after retries")

def main():
    print("‚ñ∂ First connection")
    s1 = safe_connect()
    data = s1.recv(1024)
    print(f"Received: {data.decode()}")
    s1.close()
    print("Closed first connection.\n")

    print("‚ñ∂ Second connection (may trigger Challenge ACK)")
    time.sleep(0.05)  # Î∞îÎ°ú Ïó∞Í≤∞ ÏãúÎèÑ
    try:
        s2 = safe_connect()
        data2 = s2.recv(1024)
        print(f"Second received: {data2.decode()}")
        s2.close()
    except Exception as e:
        print(f"Second connection failed: {e}")

if __name__ == "__main__":
    main()
